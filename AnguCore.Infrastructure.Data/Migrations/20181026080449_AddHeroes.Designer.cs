// <auto-generated />
using System;
using AnguCore.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnguCore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181026080449_AddHeroes")]
    partial class AddHeroes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnguCore.Core.Entities.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Heroes");

                    b.HasData(
                        new { Id = 1, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Mr. Nice" },
                        new { Id = 2, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Narco" },
                        new { Id = 3, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Bombasto" },
                        new { Id = 4, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Celeritas" },
                        new { Id = 5, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Magneta" },
                        new { Id = 6, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "RubberMan" },
                        new { Id = 7, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Dynama" },
                        new { Id = 8, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Dr IQ" },
                        new { Id = 9, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Magma" },
                        new { Id = 10, AddedDate = new DateTime(2018, 10, 26, 8, 4, 49, 355, DateTimeKind.Utc), Name = "Tornado" }
                    );
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityRoleClaim", b =>
                {
                    b.HasOne("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserClaim", b =>
                {
                    b.HasOne("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserLogin", b =>
                {
                    b.HasOne("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserRole", b =>
                {
                    b.HasOne("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUserToken", b =>
                {
                    b.HasOne("AnguCore.Infrastructure.Data.Identity.ApplicationIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
